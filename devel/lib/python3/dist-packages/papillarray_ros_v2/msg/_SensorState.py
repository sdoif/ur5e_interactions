# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from papillarray_ros_v2/SensorState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import papillarray_ros_v2.msg
import std_msgs.msg

class SensorState(genpy.Message):
  _md5sum = "5d7c28da3453a417882d03f775d18f22"
  _type = "papillarray_ros_v2/SensorState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
int64 tus
PillarState[] pillars
float32 gfX
float32 gfY
float32 gfZ
float32 gtX
float32 gtY
float32 gtZ
float32 friction_est
float32 target_grip_force
bool is_sd_active
bool is_ref_loaded
bool is_contact

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: papillarray_ros_v2/PillarState
Header header
int32 id
float32 dX
float32 dY
float32 dZ
float32 fX
float32 fY
float32 fZ
bool in_contact
int32 slip_state
"""
  __slots__ = ['header','tus','pillars','gfX','gfY','gfZ','gtX','gtY','gtZ','friction_est','target_grip_force','is_sd_active','is_ref_loaded','is_contact']
  _slot_types = ['std_msgs/Header','int64','papillarray_ros_v2/PillarState[]','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tus,pillars,gfX,gfY,gfZ,gtX,gtY,gtZ,friction_est,target_grip_force,is_sd_active,is_ref_loaded,is_contact

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tus is None:
        self.tus = 0
      if self.pillars is None:
        self.pillars = []
      if self.gfX is None:
        self.gfX = 0.
      if self.gfY is None:
        self.gfY = 0.
      if self.gfZ is None:
        self.gfZ = 0.
      if self.gtX is None:
        self.gtX = 0.
      if self.gtY is None:
        self.gtY = 0.
      if self.gtZ is None:
        self.gtZ = 0.
      if self.friction_est is None:
        self.friction_est = 0.
      if self.target_grip_force is None:
        self.target_grip_force = 0.
      if self.is_sd_active is None:
        self.is_sd_active = False
      if self.is_ref_loaded is None:
        self.is_ref_loaded = False
      if self.is_contact is None:
        self.is_contact = False
    else:
      self.header = std_msgs.msg.Header()
      self.tus = 0
      self.pillars = []
      self.gfX = 0.
      self.gfY = 0.
      self.gfZ = 0.
      self.gtX = 0.
      self.gtY = 0.
      self.gtZ = 0.
      self.friction_est = 0.
      self.target_grip_force = 0.
      self.is_sd_active = False
      self.is_ref_loaded = False
      self.is_contact = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tus
      buff.write(_get_struct_q().pack(_x))
      length = len(self.pillars)
      buff.write(_struct_I.pack(length))
      for val1 in self.pillars:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_i6fBi().pack(_x.id, _x.dX, _x.dY, _x.dZ, _x.fX, _x.fY, _x.fZ, _x.in_contact, _x.slip_state))
      _x = self
      buff.write(_get_struct_8f3B().pack(_x.gfX, _x.gfY, _x.gfZ, _x.gtX, _x.gtY, _x.gtZ, _x.friction_est, _x.target_grip_force, _x.is_sd_active, _x.is_ref_loaded, _x.is_contact))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pillars is None:
        self.pillars = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.tus,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pillars = []
      for i in range(0, length):
        val1 = papillarray_ros_v2.msg.PillarState()
        _v3 = val1.header
        start = end
        end += 4
        (_v3.seq,) = _get_struct_I().unpack(str[start:end])
        _v4 = _v3.stamp
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.frame_id = str[start:end]
        _x = val1
        start = end
        end += 33
        (_x.id, _x.dX, _x.dY, _x.dZ, _x.fX, _x.fY, _x.fZ, _x.in_contact, _x.slip_state,) = _get_struct_i6fBi().unpack(str[start:end])
        val1.in_contact = bool(val1.in_contact)
        self.pillars.append(val1)
      _x = self
      start = end
      end += 35
      (_x.gfX, _x.gfY, _x.gfZ, _x.gtX, _x.gtY, _x.gtZ, _x.friction_est, _x.target_grip_force, _x.is_sd_active, _x.is_ref_loaded, _x.is_contact,) = _get_struct_8f3B().unpack(str[start:end])
      self.is_sd_active = bool(self.is_sd_active)
      self.is_ref_loaded = bool(self.is_ref_loaded)
      self.is_contact = bool(self.is_contact)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tus
      buff.write(_get_struct_q().pack(_x))
      length = len(self.pillars)
      buff.write(_struct_I.pack(length))
      for val1 in self.pillars:
        _v5 = val1.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_i6fBi().pack(_x.id, _x.dX, _x.dY, _x.dZ, _x.fX, _x.fY, _x.fZ, _x.in_contact, _x.slip_state))
      _x = self
      buff.write(_get_struct_8f3B().pack(_x.gfX, _x.gfY, _x.gfZ, _x.gtX, _x.gtY, _x.gtZ, _x.friction_est, _x.target_grip_force, _x.is_sd_active, _x.is_ref_loaded, _x.is_contact))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pillars is None:
        self.pillars = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.tus,) = _get_struct_q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pillars = []
      for i in range(0, length):
        val1 = papillarray_ros_v2.msg.PillarState()
        _v7 = val1.header
        start = end
        end += 4
        (_v7.seq,) = _get_struct_I().unpack(str[start:end])
        _v8 = _v7.stamp
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.frame_id = str[start:end]
        _x = val1
        start = end
        end += 33
        (_x.id, _x.dX, _x.dY, _x.dZ, _x.fX, _x.fY, _x.fZ, _x.in_contact, _x.slip_state,) = _get_struct_i6fBi().unpack(str[start:end])
        val1.in_contact = bool(val1.in_contact)
        self.pillars.append(val1)
      _x = self
      start = end
      end += 35
      (_x.gfX, _x.gfY, _x.gfZ, _x.gtX, _x.gtY, _x.gtZ, _x.friction_est, _x.target_grip_force, _x.is_sd_active, _x.is_ref_loaded, _x.is_contact,) = _get_struct_8f3B().unpack(str[start:end])
      self.is_sd_active = bool(self.is_sd_active)
      self.is_ref_loaded = bool(self.is_ref_loaded)
      self.is_contact = bool(self.is_contact)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_8f3B = None
def _get_struct_8f3B():
    global _struct_8f3B
    if _struct_8f3B is None:
        _struct_8f3B = struct.Struct("<8f3B")
    return _struct_8f3B
_struct_i6fBi = None
def _get_struct_i6fBi():
    global _struct_i6fBi
    if _struct_i6fBi is None:
        _struct_i6fBi = struct.Struct("<i6fBi")
    return _struct_i6fBi
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
