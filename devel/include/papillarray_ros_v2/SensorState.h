// Generated by gencpp from file papillarray_ros_v2/SensorState.msg
// DO NOT EDIT!


#ifndef PAPILLARRAY_ROS_V2_MESSAGE_SENSORSTATE_H
#define PAPILLARRAY_ROS_V2_MESSAGE_SENSORSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <papillarray_ros_v2/PillarState.h>

namespace papillarray_ros_v2
{
template <class ContainerAllocator>
struct SensorState_
{
  typedef SensorState_<ContainerAllocator> Type;

  SensorState_()
    : header()
    , tus(0)
    , pillars()
    , gfX(0.0)
    , gfY(0.0)
    , gfZ(0.0)
    , gtX(0.0)
    , gtY(0.0)
    , gtZ(0.0)
    , friction_est(0.0)
    , target_grip_force(0.0)
    , is_sd_active(false)
    , is_ref_loaded(false)
    , is_contact(false)  {
    }
  SensorState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tus(0)
    , pillars(_alloc)
    , gfX(0.0)
    , gfY(0.0)
    , gfZ(0.0)
    , gtX(0.0)
    , gtY(0.0)
    , gtZ(0.0)
    , friction_est(0.0)
    , target_grip_force(0.0)
    , is_sd_active(false)
    , is_ref_loaded(false)
    , is_contact(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _tus_type;
  _tus_type tus;

   typedef std::vector< ::papillarray_ros_v2::PillarState_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::papillarray_ros_v2::PillarState_<ContainerAllocator> >> _pillars_type;
  _pillars_type pillars;

   typedef float _gfX_type;
  _gfX_type gfX;

   typedef float _gfY_type;
  _gfY_type gfY;

   typedef float _gfZ_type;
  _gfZ_type gfZ;

   typedef float _gtX_type;
  _gtX_type gtX;

   typedef float _gtY_type;
  _gtY_type gtY;

   typedef float _gtZ_type;
  _gtZ_type gtZ;

   typedef float _friction_est_type;
  _friction_est_type friction_est;

   typedef float _target_grip_force_type;
  _target_grip_force_type target_grip_force;

   typedef uint8_t _is_sd_active_type;
  _is_sd_active_type is_sd_active;

   typedef uint8_t _is_ref_loaded_type;
  _is_ref_loaded_type is_ref_loaded;

   typedef uint8_t _is_contact_type;
  _is_contact_type is_contact;





  typedef boost::shared_ptr< ::papillarray_ros_v2::SensorState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::papillarray_ros_v2::SensorState_<ContainerAllocator> const> ConstPtr;

}; // struct SensorState_

typedef ::papillarray_ros_v2::SensorState_<std::allocator<void> > SensorState;

typedef boost::shared_ptr< ::papillarray_ros_v2::SensorState > SensorStatePtr;
typedef boost::shared_ptr< ::papillarray_ros_v2::SensorState const> SensorStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::papillarray_ros_v2::SensorState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::papillarray_ros_v2::SensorState_<ContainerAllocator1> & lhs, const ::papillarray_ros_v2::SensorState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tus == rhs.tus &&
    lhs.pillars == rhs.pillars &&
    lhs.gfX == rhs.gfX &&
    lhs.gfY == rhs.gfY &&
    lhs.gfZ == rhs.gfZ &&
    lhs.gtX == rhs.gtX &&
    lhs.gtY == rhs.gtY &&
    lhs.gtZ == rhs.gtZ &&
    lhs.friction_est == rhs.friction_est &&
    lhs.target_grip_force == rhs.target_grip_force &&
    lhs.is_sd_active == rhs.is_sd_active &&
    lhs.is_ref_loaded == rhs.is_ref_loaded &&
    lhs.is_contact == rhs.is_contact;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::papillarray_ros_v2::SensorState_<ContainerAllocator1> & lhs, const ::papillarray_ros_v2::SensorState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace papillarray_ros_v2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::papillarray_ros_v2::SensorState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::papillarray_ros_v2::SensorState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::papillarray_ros_v2::SensorState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5d7c28da3453a417882d03f775d18f22";
  }

  static const char* value(const ::papillarray_ros_v2::SensorState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5d7c28da3453a417ULL;
  static const uint64_t static_value2 = 0x882d03f775d18f22ULL;
};

template<class ContainerAllocator>
struct DataType< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "papillarray_ros_v2/SensorState";
  }

  static const char* value(const ::papillarray_ros_v2::SensorState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int64 tus\n"
"PillarState[] pillars\n"
"float32 gfX\n"
"float32 gfY\n"
"float32 gfZ\n"
"float32 gtX\n"
"float32 gtY\n"
"float32 gtZ\n"
"float32 friction_est\n"
"float32 target_grip_force\n"
"bool is_sd_active\n"
"bool is_ref_loaded\n"
"bool is_contact\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: papillarray_ros_v2/PillarState\n"
"Header header\n"
"int32 id\n"
"float32 dX\n"
"float32 dY\n"
"float32 dZ\n"
"float32 fX\n"
"float32 fY\n"
"float32 fZ\n"
"bool in_contact\n"
"int32 slip_state\n"
;
  }

  static const char* value(const ::papillarray_ros_v2::SensorState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tus);
      stream.next(m.pillars);
      stream.next(m.gfX);
      stream.next(m.gfY);
      stream.next(m.gfZ);
      stream.next(m.gtX);
      stream.next(m.gtY);
      stream.next(m.gtZ);
      stream.next(m.friction_est);
      stream.next(m.target_grip_force);
      stream.next(m.is_sd_active);
      stream.next(m.is_ref_loaded);
      stream.next(m.is_contact);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::papillarray_ros_v2::SensorState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::papillarray_ros_v2::SensorState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tus: ";
    Printer<int64_t>::stream(s, indent + "  ", v.tus);
    s << indent << "pillars[]" << std::endl;
    for (size_t i = 0; i < v.pillars.size(); ++i)
    {
      s << indent << "  pillars[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::papillarray_ros_v2::PillarState_<ContainerAllocator> >::stream(s, indent + "    ", v.pillars[i]);
    }
    s << indent << "gfX: ";
    Printer<float>::stream(s, indent + "  ", v.gfX);
    s << indent << "gfY: ";
    Printer<float>::stream(s, indent + "  ", v.gfY);
    s << indent << "gfZ: ";
    Printer<float>::stream(s, indent + "  ", v.gfZ);
    s << indent << "gtX: ";
    Printer<float>::stream(s, indent + "  ", v.gtX);
    s << indent << "gtY: ";
    Printer<float>::stream(s, indent + "  ", v.gtY);
    s << indent << "gtZ: ";
    Printer<float>::stream(s, indent + "  ", v.gtZ);
    s << indent << "friction_est: ";
    Printer<float>::stream(s, indent + "  ", v.friction_est);
    s << indent << "target_grip_force: ";
    Printer<float>::stream(s, indent + "  ", v.target_grip_force);
    s << indent << "is_sd_active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_sd_active);
    s << indent << "is_ref_loaded: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_ref_loaded);
    s << indent << "is_contact: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_contact);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAPILLARRAY_ROS_V2_MESSAGE_SENSORSTATE_H
